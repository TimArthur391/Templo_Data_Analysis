make it so the canvas resizes with the window size
frame forwards and backwards buttons
add a history log

 # Create the calibration buttons
        self.distortion_calibration_button = Button(self.calibration_window, text="Camera distortion calibration", command=self.create_camera_distortion_calibration_widgets, style='TButton')
        self.distortion_calibration_button.grid(row=1, column=0, columnspan=2, sticky='nsew', padx=5, pady=2)
        self.distortion_calibration_button.config(state=tk.DISABLED)

        self.distance_calibration_button = Button(self.calibration_window, text="Calibrate image distances", command=self.create_image_distance_calibration_widgets, style='TButton')
        self.distance_calibration_button.grid(row=1, column=2, columnspan=2, sticky='nsew', padx=5, pady=2)

             
        

    def create_camera_distortion_calibration_widgets(self):
        # Create a label show the current camera matrix and distortion coefficiants
        self.current_distortion_info_label = Label(self.calibration_window, text="This will show the current distortion information.")
        self.current_distortion_info_label.grid(row=2, column=0, columnspan=1, sticky='nsew', padx=5, pady=2)

        # Create 4 canvases to show the before and after effects of flattening of an image - maybe do this in another window


        # Create buttons to calibrate the coronal camera or the sagittal camera
        self.coronal_distortion_calibration_button = Button(self.calibration_window, text="Coronal camera calibration", command=self.camera_distortion_calibration("coronal"), style='TButton')
        self.coronal_distortion_calibration_button.grid(row=3, column=0, columnspan=2, sticky='nsew', padx=5, pady=2)

        self.sagittal_distortion_calibration_button = Button(self.calibration_window, text="Sagittal camera calibration", command=self.camera_distortion_calibration("sagittal"), style='TButton')
        self.sagittal_distortion_calibration_button.grid(row=3, column=0, columnspan=2, sticky='nsew', padx=5, pady=2)

        # Create calibration save button
        self.distortion_calibration_camera_view = None

    def camera_distortion_calibration(self, camera_view):
        # link the Harry's GUI or put Harry's code in here
        pass

    def create_image_distance_calibration_widgets(self):
        # Create a custom style for the interface
        style = Style()
        style.theme_use('clam')  # Use the 'clam' theme as a base

        # Configure the colors for the dark theme
        style.configure('.', foreground='white', background='#2d2d2d')  # Set text and background color for all elements
        style.configure('TButton', foreground='white', background='#444444', bordercolor='#666666',
                        lightcolor='#444444', darkcolor='#444444')  # Customize Button widget
        style.configure('TLabel', foreground='white', background='#2d2d2d')  # Customize Label widget
        style.configure('TCheckbutton', foreground='white', background='#2d2d2d', indicatorcolor='white',
                        selectcolor='#2d2d2d', troughcolor='#2d2d2d')  # Customize Checkbutton widget

        # Override hover behavior for Checkbutton
        style.map('TCheckbutton',
                  background=[('active', '#2d2d2d'), ('selected', '#2d2d2d')],
                  foreground=[('active', 'white'), ('selected', 'white')])

        # Create the Open Video button
        self.calibration_open_button = Button(self.calibration_window, text="Open Video", command=self.open_video, style='TButton')
        self.calibration_open_button.grid(row=0, column=0, columnspan=4, sticky='nsew', padx=5, pady=2)

        #Create Frame, Timestamp, Forward and Backwards Buttons
        nested_frame = tk.Frame(self.calibration_window, bg='#2d2d2d')
        nested_frame.grid(row=4, column=0, columnspan=2, sticky='nsew', padx=0, pady=0)

        self.calibration_zoom_in_button = Button(nested_frame, text="Zoom In", command=self.zoom_in, style='TButton')
        self.calibration_zoom_in_button.grid(row=0, column=4, columnspan=1, sticky='nsew', padx=15, pady=2)
        self.calibration_zoom_in_button.config(state=tk.DISABLED)
        
        self.calibration_zoom_out_button = Button(nested_frame, text="Zoom Out", command=self.zoom_out, style='TButton')
        self.calibration_zoom_out_button.grid(row=0, column=5, columnspan=1, sticky='nsew', padx=5, pady=2)
        self.calibration_zoom_out_button.config(state=tk.DISABLED)

        # Create the canvas for displaying the video frames
        nested_frame_2 = tk.Frame(self.calibration_window, bg='#2d2d2d')
        nested_frame_2.grid(row=2, column=0, columnspan=2, sticky='nsew', padx=0, pady=0)
        v_scrollbar = tk.Scrollbar(nested_frame_2, orient=tk.VERTICAL)
        h_scrollbar = tk.Scrollbar(nested_frame_2, orient=tk.HORIZONTAL)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)

        self.calibration_canvas = tk.Canvas(nested_frame_2,  width=self.image_width, height=self.image_height, bg='black', yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        self.calibration_canvas.pack(fill=tk.BOTH, expand=True)

        v_scrollbar.config(command=self.calibration_canvas.yview)
        h_scrollbar.config(command=self.calibration_canvas.xview)



        # Create the listbox for displaying the coordinates
        self.calibration_coordinates_listbox = tk.Listbox(self.calibration_window, width=35, background='#444444', foreground='white')
        self.calibration_coordinates_listbox.grid(row=2, column=2, columnspan=2, sticky='nsew', padx=5, pady=2)

        # Create the Remove button
        self.calibration_remove_button = Button(self.calibration_window, text="Remove", command=self.remove_calibration_coordinates, style='TButton')
        self.calibration_remove_button.grid(row=4, column=2, columnspan=2, sticky='nsew', padx=5, pady=2)

        self.calibration_coronal_check = Checkbutton(self.calibration_window, text='Coronal', variable=self.camera_view, onvalue=1,
                                    command=lambda: self.set_camera_view(1), style='TCheckbutton')#, foreground='white', background='#2d2d2d')
        self.calibration_coronal_check.grid(row=1, column=0, columnspan=1, padx=5, pady=2)

        self.calibration_sagittal_check = Checkbutton(self.calibration_window, text='Sagittal', variable=self.camera_view, onvalue=2,
                                    command=lambda: self.set_camera_view(2), style='TCheckbutton')#, foreground='white', background='#2d2d2d')
        self.calibration_sagittal_check.grid(row=1, column=1, columnspan=1, padx=5, pady=2)


        self.calibration_button = Button(self.calibration_window, text="Calibrate", command=self.calibrate, style='TButton')
        self.calibration_button.grid(row=5, column=0, columnspan=4, sticky='nsew', padx=5, pady=5)
        self.calibration_button.config(state=tk.DISABLED)


        # Bind mouse click events to the canvas
        self.calibration_canvas.bind("<Button-1>", self.handle_click)

        # Bind the events for changing the mouse cursor
        list_of_buttons = [self.calibration_open_button, self.calibration_remove_button, 
                           self.calibration_button, self.calibration_coronal_check, self.calibration_sagittal_check,
                           self.calibration_zoom_in_button, self.calibration_zoom_out_button]
        for button in list_of_buttons:
            button.bind('<Enter>', self.handle_enter)
            button.bind('<Leave>', self.handle_leave)


        # Create a button to calibrate distance


        # Create a label to show the new pixel to distance conversion


        # Create a button that will update the conversion to the new value
